{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33a2ead6-20a5-44f5-9299-e6e8e005655f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pymysql\n",
    "import pandas as pd\n",
    "from datetime import time\n",
    "\n",
    "def get_db_connection():\n",
    "    return pymysql.connect(\n",
    "        host='127.0.0.1',\n",
    "        user='root',\n",
    "        password='Nikil@8405',\n",
    "        database='red_bus'\n",
    "    )\n",
    "\n",
    "@st.cache_data\n",
    "def load_data(query):\n",
    "    connection = get_db_connection()\n",
    "    df = pd.read_sql(query, connection)\n",
    "    connection.close()\n",
    "    return df\n",
    "\n",
    "# Sidebar for user input\n",
    "st.title(\"Red Bus Data Explorer\")\n",
    "st.write(\"Explore and filter the data based on the following criteria:\")\n",
    "\n",
    "# Filter page:\n",
    "st.sidebar.header(\"Search the Buses\")\n",
    "\n",
    "bus_type = st.sidebar.selectbox(\"Select the Bus Type\", [\"All\", \"A/C\", \"NON A/C\", \"Sleeper\", \"Semi Sleeper\"])\n",
    "\n",
    "route_name = st.sidebar.text_input(\"Enter the Route Name (leave a blank for all)\")\n",
    "\n",
    "price = st.sidebar.slider(\"Select the Price range\", min_value=80, max_value=5000, value=(200, 1000))\n",
    "\n",
    "star_rating = st.sidebar.slider(\"Select the Star Ratings range:\", min_value=1, max_value=5, value=(1, 2))\n",
    "\n",
    "seat_availability = st.sidebar.slider(\"Select the Seat availability:\", min_value=1, max_value=65, value=(5, 10))\n",
    "\n",
    "search = st.sidebar.button(\"Search\")\n",
    "\n",
    "# Build SQL Query dynamically\n",
    "if search:\n",
    "    query = \"\"\"\n",
    "    SELECT Route_Name, Bus_Name, Bus_Type, Departing_Time, Duration, Reaching_Time, Star_Rating, Price, Seat_Availability \n",
    "    FROM bus_routes WHERE 1=1\n",
    "    \"\"\"\n",
    "\n",
    "    # Apply filters based on user input\n",
    "    if bus_type != \"All\":\n",
    "        query += f\" AND Bus_Type like '%{bus_type}%'\"\n",
    "\n",
    "    if route_name:\n",
    "        query += f\" AND Route_Name LIKE '%{route_name}%'\"\n",
    "\n",
    "    query += f\" AND Price BETWEEN {price[0]} AND {price[1]}\"\n",
    "\n",
    "    query += f\" AND Star_Rating BETWEEN {star_rating[0]} AND {star_rating[1]}\"\n",
    "\n",
    "    query += f\" AND Seat_Availability BETWEEN {seat_availability[0]} AND {seat_availability[1]}\"\n",
    "\n",
    "    filtered_data = load_data(query)\n",
    "    st.write(f\"Total no of buses found: {len(filtered_data)}\")\n",
    "\n",
    "    if filtered_data.empty:\n",
    "        st.write(\"No buses available based on the selected filters.\")\n",
    "    else:\n",
    "        st.dataframe(filtered_data)\n",
    "\n",
    "# Show Top Rated Buses based on checkbox\n",
    "if st.sidebar.checkbox(\"Show Top Rated Buses\", value=True):\n",
    "    st.sidebar.write(\"Uncheck the checkbox to view only filtered bus details.\")\n",
    "\n",
    "    top_rated_query = \"\"\"\n",
    "    SELECT Route_Name, Bus_Name, Bus_Type, Star_Rating, Price\n",
    "    FROM bus_routes\n",
    "    ORDER BY Star_Rating DESC\n",
    "    LIMIT 5;\n",
    "    \"\"\"\n",
    "    top_rated_buses = load_data(top_rated_query)\n",
    "    st.subheader(\"Top 5 Rated Buses\")\n",
    "    st.table(top_rated_buses)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
